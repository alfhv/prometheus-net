<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tester.NetCore</name>
    </assembly>
    <members>
        <member name="T:tester.AspNetCoreMiddlewareTester">
            <summary>
            This targets ASP.NET Core 3.
            </summary>
        </member>
        <member name="T:tester.Tester">
            <summary>
            This is a quick and dirty abstraction that allows the metrics-serving functionality of the tester
            to be swapped out by changing only a single line of code. It facilitates easy manual testing of different scenarios.
            </summary>
        </member>
        <member name="M:tester.Tester.OnTimeToObserveMetrics">
            <summary>
            Called when it is time to observe the exported metrics and report them to the user.
            </summary>
        </member>
        <member name="M:tester.Tester.InitializeMetricServer">
            <summary>
            Start/Stop are called on the metric server at the appropriate moments.
            This may return null if the mechanism under test does not use IMetricTester method of registration.
            </summary>
        </member>
        <member name="F:tester.TesterConstants.TesterPort">
            <summary>
            Just something in the user ports range that is unlikely to be already used on developer PC.
            </summary>
        </member>
        <member name="T:Tester.GreetReflection">
            <summary>Holder for reflection information generated from Protos/greet.proto</summary>
        </member>
        <member name="P:Tester.GreetReflection.Descriptor">
            <summary>File descriptor for Protos/greet.proto</summary>
        </member>
        <member name="T:Tester.HelloRequest">
            <summary>
            The request message containing the user's name.
            </summary>
        </member>
        <member name="F:Tester.HelloRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="T:Tester.HelloReply">
            <summary>
            The response message containing the greetings.
            </summary>
        </member>
        <member name="F:Tester.HelloReply.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="T:Tester.Greeter">
            <summary>
            The greeting service definition.
            </summary>
        </member>
        <member name="P:Tester.Greeter.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Tester.Greeter.GreeterBase">
            <summary>Base class for server-side implementations of Greeter</summary>
        </member>
        <member name="M:Tester.Greeter.GreeterBase.SayHello(Tester.HelloRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Sends a greeting
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Tester.Greeter.GreeterClient">
            <summary>Client for Greeter</summary>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Greeter</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Greeter that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.SayHello(Tester.HelloRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Sends a greeting
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.SayHello(Tester.HelloRequest,Grpc.Core.CallOptions)">
            <summary>
            Sends a greeting
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.SayHelloAsync(Tester.HelloRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Sends a greeting
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.SayHelloAsync(Tester.HelloRequest,Grpc.Core.CallOptions)">
            <summary>
            Sends a greeting
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Tester.Greeter.GreeterClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Tester.Greeter.BindService(Tester.Greeter.GreeterBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Tester.Greeter.BindService(Grpc.Core.ServiceBinderBase,Tester.Greeter.GreeterBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
